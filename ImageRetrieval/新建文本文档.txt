/**
* CS4185/CS5185 Multimedia Technologies and Applications
* Course Assignment
* Image Retrieval Project
*/

#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include "opencv/cv.h"
using namespace std;
using namespace cv;

#define IMAGE_LIST_FILE "inputimage.txt"

typedef struct image//自定义结构体
{
	double position_score;
	double size_score;
	double color_score;
	double total_score;
	char image_name[200];

}image;


Mat src_input, gray_input;
Mat db_img, db_gray_img;
Mat src_canny;
vector<image> images;

double score[1000];
int db_id = 0;
double maxscore = 1000000000;
double maxscore1 = 1000000000;
int maxscore_num;
char maximg_name[200];
Mat max_img;



char* window_name = "input";

Mat canny(int, void*, Mat source)
{
	Mat src_gray;
	Mat detectEdges;
	Mat dst;   //canny block
	int lowThreshold = 100;
	int const max_lowThreshold = 100;
	int ratio = 3;
	int kernel_size = 3;
	cvtColor(source, src_gray, CV_BGR2GRAY);
	blur(src_gray, detectEdges, Size(3, 3));
	Canny(detectEdges, detectEdges, lowThreshold, lowThreshold*ratio, kernel_size);
	dst = Scalar::all(0);
	source.copyTo(dst, detectEdges);

	return dst;
}

double* quantization(Mat image){
	//类型转换
	double color[37] = {0.00};
	for (int i = 0; i < image.rows; i++)
	for (int j = 0; j < image.cols; j++)
	{
		Vec3b hsv = image.at<Vec3b>(i, j);
		double h = hsv.val[0]*2;
		double s = hsv.val[1]/255.00;
		double v = hsv.val[2]/255.00;
		//cout << fixed << setprecision(2) << s << endl;
		if (v >= 0 && v <= 0.2){
			color[0]++;
		}
		else if (s>=0 && s<=0.2 && v>0.2 && v <= 0.8){
			int index = floor(v - 0.2) * 10 + 1;
			color[index]++;
		}
		else if(s >=0 && s<= 0.2 && v>0.8 && v<=1){
			color[36]++;
		}
		else if (s >= 0.2 && s <= 1 && v > 0.2 && v <= 1){
			if (h >= 0 && h <= 22)h = 0;
			else if (h > 330 && h <= 360) h = 0;
			else if (h > 22 && h <= 45)h = 1;
			else if (h > 45 && h <= 70)h = 2;
			else if (h > 70 && h <= 155)h = 3;
			else if (h > 155 && h <= 186)h = 4;
			else if (h > 186 && h <= 260)h = 5;
			else if (h > 260 && h <= 330)h = 6;
			if (s >= 0.2 && s <= 0.65)s = 0;
			else s = 1;
			if (v >= 0.2 && s <= 0.7)v = 0;
			else v = 1;
			int index = 4 * h + 2 * s + v + 8;
			color[index]++;
		}
	}
	double max = 0.00;
	for (int t = 0; t < 37; t++)
	{
		max = max < color[t] ? color[t] : max;
	}
	for (int t = 0; t < 37; t++)
		color[t] = color[t] / max;
	return color;
}

double compare_color(double c_input[], double c_db[]){
	double sum = 0;
	double diff[37];
	for (int i = 0; i < 37; i++){
		if (c_input[i] == 0 || c_db[i] == 0){
			diff[i] = -abs(c_input[i]-c_db[i]);
		}
		else{
			diff[i] = (1 - abs(c_input[i] - c_db[i]))*(c_input[i]<c_db[i] ? c_input[i] : c_db[i]);
		}
		sum += diff[i];
	}
	return sum;
}
double compareImgs(Mat img1, Mat img2)
{
	int w = img1.cols, h = img2.rows;
	Mat new_img2;
	resize(img2, new_img2, img1.size());
	double sum = 0;
	for (int i = 0; i < w; i++)for (int j = 0; j < h; j++)
	{
		sum += (img1.at<uchar>(j, i) ^ new_img2.at<uchar>(j, i)) / 255;
	}
	return sum / 1000;
}

bool comparison(const image& r, const image& s)
{
	return r.total_score < s.total_score;
}
int main(int argc, char** argv)
{
	string filename;
	int uplimit;
	cout << "Please type in the input picture name: ";
	cin >> filename;
	cout << "Please type in the quantity of output images: ";
	cin >> uplimit;
	src_input = imread(filename + ".jpg"); // read input image
	if (!src_input.data)
	{
		printf("Cannot find the input image!\n");
		system("pause");
		return -1;
	}
	//color quantization
	Mat hsv_input;
	cvtColor(src_input, hsv_input, CV_BGR2HSV);
	double *c_input = new double[37];
	c_input = quantization(hsv_input);

	//轮廓
	IplImage* Ipl_canny = &src_input.operator IplImage();
	//IplImage* Ipl_canny_t = cvCreateImage(cvGetSize(Ipl_canny),Ipl_canny->depth, 1);
	IplImage* Ipl_canny_t = NULL;
	IplImage* Ipl_gray;
	CvMemStorage *model_mems = cvCreateMemStorage();
	CvSeq *mode_seqs;

	Ipl_canny_t = cvCreateImage(cvGetSize(Ipl_canny), IPL_DEPTH_8U, 1);
	cvCanny(Ipl_canny, Ipl_canny_t, 100, 200, 3);
	cvShowImage(window_name, Ipl_canny_t);
	cvFindContours(Ipl_canny_t, model_mems,
		&mode_seqs, sizeof(CvContour), CV_RETR_TREE);

	///Read Database
	FILE   *fp;
	char imagepath[200];
	fp = fopen("inputimage.txt", "r ");
	printf("Extracting features from input images...\n");

	//cvSplit(hsv_1, h_plane_1, s_plane_1, v_plane_1, 0);
	while (!feof(fp))
	{
		while (fscanf(fp, "%s ", imagepath)   >   0)
		{
			printf("%s\n", imagepath);
			char tempname[200];
			image tempimage;
			sprintf_s(tempimage.image_name, 200, "../%s", imagepath);

			db_img = imread(tempimage.image_name); // read database image
			if (!db_img.data)
			{
				printf("Cannot find the database image number %d!\n", db_id + 1);
				system("pause");
				return -1;
			}

			//color procedure
			//tempimage.color_score = compareImgs(hist1, db_img);
			Mat hsv_db;
			cvtColor(db_img, hsv_db, CV_BGR2HSV);
			double *c_db = new double[37];
			c_db = quantization(hsv_db);
			tempimage.color_score = compare_color(c_input, c_db);
			//canny procedure

			IplImage* db_canny = &db_img.operator IplImage();
			//IplImage* db_canny_t = cvCreateImage(cvGetSize(db_canny), db_canny->depth, 1);
			IplImage* db_canny_t = NULL;

			CvMemStorage *db_mems = cvCreateMemStorage();
			CvSeq *db_seqs;
			db_canny_t = cvCreateImage(cvGetSize(db_canny), IPL_DEPTH_8U, 1);
			cvCanny(db_canny, db_canny_t, 100, 200, 3);
			cvFindContours(db_canny_t, db_mems,
				&db_seqs, sizeof(CvContour), CV_RETR_TREE);

			//double matching = cvMatchShapes(db_seqs, mode_seqs, CV_CONTOURS_MATCH_I1);
			Mat src_mat(Ipl_canny_t, 0);
			Mat db_mat(db_canny_t);
			double matching = compareImgs(src_mat, db_mat);
			cout << "canny" << matching << endl;
			cvReleaseImage(&db_canny_t);

			tempimage.position_score = matching;

			tempimage.total_score = tempimage.color_score;
			
			images.push_back(tempimage);

			db_id++;
		}
	}
	fclose(fp);
	double max = 0;
	for (int i = 0; i < images.size(); i++)
		max = max>images[i].total_score ? max : images[i].total_score;
	for (int i = 0; i < images.size(); i++)
	{
		images[i].total_score = images[i].total_score / max;
		cout << images[i].total_score << endl;
	}
		
	sort(images.begin(), images.end(), comparison);
	
	for (int j = 0; j<uplimit; j++)
	{
		char name[20];
		itoa(j, name, 20);
		char path[50] = "set/";
		strcat(path, name);
		char suffix[] = ".jpg";
		strcat(path,suffix);
		Mat maximg = imread(images[j].image_name);
		IplImage* save = &maximg.operator IplImage();
		cvSaveImage(path,save);
	}

	//printf("the most similar image is %d, the pixel-by-pixel difference is %f\n",maxscore_num+1, images[1].score);

	printf("Done \n");
	// Wait for the user to press a key in the GUI window.
	//Press ESC to quit
	int keyValue = 0;
	while (keyValue >= 0)
	{
		keyValue = cvWaitKey(0);

		switch (keyValue)
		{
		case 27:keyValue = -1;
			break;
		}
	}

	return 0;
}
